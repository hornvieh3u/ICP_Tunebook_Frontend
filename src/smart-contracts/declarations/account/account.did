type definite_canister_settings = 
 record {
   compute_allocation: nat;
   controllers: opt vec principal;
   freezing_threshold: nat;
   memory_allocation: nat;
 };
type UserId = principal;
type Timestamp = int;
type StatusResponse = 
 record {
   cycles: opt nat;
   heap_memory_size: opt nat;
   memory_size: opt nat;
   version: opt nat;
 };
type StatusRequest = 
 record {
   cycles: bool;
   heap_memory_size: bool;
   memory_size: bool;
   version: bool;
 };
type ProfilePhoto = blob;
type PrincipalInfo = 
 record {
   createdAt: Timestamp;
   userPrincipal: principal;
 };
type CanisterStatus = 
 record {
   cycles: nat;
   memory_size: nat;
   module_hash: opt blob;
   settings: definite_canister_settings;
   status: variant {
             running;
             stopped;
             stopping;
           };
 };
type ArtistBucket = 
 service {
   changeCanisterSize: (nat) -> () oneway;
   changeCycleAmount: (nat) -> () oneway;
   checkCyclesBalance: () -> ();
   createProfileInfo: (opt ArtistAccountData) -> (bool);
   deleteAccount: (principal) -> ();
   editProfileInfo: (ArtistAccountData) -> (bool);
   getCanisterStatus: () -> (CanisterStatus);
   getCurrentCyclesBalance: () -> (nat);
   getPrincipalThis: () -> (principal) query;
   getProfileInfo: (UserId) -> (opt ArtistAccountData) query;
   getStatus: (opt StatusRequest) -> (opt StatusResponse) query;
   transferCyclesToThisCanister: () -> ();
   transferFreezingThresholdCycles: () -> ();
 };
type ArtistAccountData = 
 record {
   avatar: opt ProfilePhoto;
   createdAt: Timestamp;
   displayName: text;
   fileType: opt text;
   updatedAt: Timestamp;
   userName: text;
   userPrincipal: principal;
 };
service : (opt PrincipalInfo, principal, principal) -> ArtistBucket
