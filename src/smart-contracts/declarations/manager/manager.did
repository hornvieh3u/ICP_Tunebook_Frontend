type definite_canister_settings = 
 record {
   compute_allocation: nat;
   controllers: opt vec principal;
   freezing_threshold: nat;
   memory_allocation: nat;
 };
type UserId = principal;
type Timestamp = int;
type ProfilePhoto = blob;
type CanisterStatus = 
 record {
   cycles: nat;
   memory_size: nat;
   module_hash: opt blob;
   settings: definite_canister_settings;
   status: variant {
             running;
             stopped;
             stopping;
           };
 };
type ArtistAccountData = 
 record {
   avatar: opt ProfilePhoto;
   createdAt: Timestamp;
   displayName: text;
   fileType: opt text;
   updatedAt: Timestamp;
   userName: text;
   userPrincipal: principal;
 };
service : {
  cyclesBalance: () -> (nat) query;
  editProfileInfo: (ArtistAccountData) -> (bool);
  getArtistList: () -> (vec record {
                              UserId;
                              ArtistAccountData;
                            }) query;
  getCanisterStatus: () -> (CanisterStatus);
  getCanisterWtihAvailableMemory: (principal) -> (opt nat);
  getProfileInfo: (UserId) -> (opt ArtistAccountData) query;
  getTotalAccounts: () -> (nat) query;
  installCode: (principal, blob, blob) -> ();
  transferCyclesToCanister: (principal, nat) -> ();
  updateCanisterSize: (nat) -> () oneway;
  updateCycleAmount: (nat) -> () oneway;
}
